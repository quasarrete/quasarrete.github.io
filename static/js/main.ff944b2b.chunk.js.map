{"version":3,"sources":["components/QuizBody.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["QuizBody","_useState","useState","_useState2","Object","slicedToArray","currentQuestion","setCurrentQuestion","_useState3","_useState4","questionNumber","setQuestionNumber","_useState5","_useState6","currentScore","setCurrentScore","_useState7","_useState8","showScore","setShowScore","_useState9","getOther3Questions","_useState10","otherQuestions","setOtherQuestions","handleAnswerOptionClick","isCorrect","currentQ","getRandomInt","Questions","length","randomList","i","randomNumber","console","log","push","min","max","Math","ceil","floor","random","react_default","a","createElement","className","Fragment","onClick","src","questionImage","answerOptions","map","answerOption","answerText","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.ff944b2b.chunk.js","sourcesContent":["import sign from '../images/signs/sign-giving-order-national-speed-limit.jpg'\r\nimport '../styles/quizbody.css'\r\nimport Questions from '../questions.json'\r\nimport React, { useState } from 'react'\r\n\r\n\r\n\r\nexport default function QuizBody() {\r\n    const [currentQuestion, setCurrentQuestion] = useState(0);\r\n    const [questionNumber, setQuestionNumber] = useState(0);\r\n    const [currentScore, setCurrentScore] = useState(0);\r\n    const [showScore, setShowScore] = useState(false);\r\n    const [otherQuestions, setOtherQuestions] = useState(getOther3Questions());\r\n\r\n    const handleAnswerOptionClick = (isCorrect: boolean) => {\r\n        if(isCorrect){\r\n            const score = currentScore + 1;\r\n            setCurrentScore(score);\r\n        }\r\n        // const nextQuestion = currentQuestion + 1;\r\n        const currentQ = questionNumber + 1;\r\n\t\tif (currentQ < 20) {\r\n\t\t\tsetCurrentQuestion(getRandomInt(0,Questions.length));\r\n            setQuestionNumber(currentQ);\r\n            setOtherQuestions(getOther3Questions());\r\n\t\t} else {\r\n\t\t\tsetShowScore(true);\r\n\t\t}    \r\n        \r\n    };\r\n\r\n    const resetQuiz = () =>{\r\n        setCurrentQuestion(getRandomInt(0, Questions.length));\r\n        setQuestionNumber(0);\r\n        setOtherQuestions(getOther3Questions());\r\n        setShowScore(false);\r\n        setCurrentScore(0);\r\n    }\r\n\r\n    function getOther3Questions(){\r\n        let randomList: number[] = []\r\n        for(let i = 0; i < 3; i++){\r\n            let randomNumber = getRandomInt(0, Questions.length)\r\n            console.log(randomNumber)\r\n            if(randomNumber != currentQuestion){\r\n                randomList.push(randomNumber);\r\n            }\r\n        }\r\n        console.log(randomList);\r\n       return randomList;\r\n    }\r\n\r\n    function getRandomInt(min : number, max : number) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n      }\r\n\r\n    return (\r\n        <div className='app'>\r\n\t\t\t{showScore ? (\r\n                <>\r\n\t\t\t\t<div className='score-section'>\r\n\t\t\t\t\tYou scored {currentScore} out of {questionNumber+1}\r\n\t\t\t\t</div>\r\n                <div>\r\n                    <button onClick={resetQuiz}>Restart</button>\r\n                </div>\r\n                </>\r\n\t\t\t) : (\r\n\t\t\t\t<>\r\n            <div className='question-section'>\r\n                    <div className='question-count'>\r\n                        <span>Question {questionNumber + 1}</span>/{20}\r\n                    </div>\r\n                    <div className='question-logo-section'>\r\n                        <img src={Questions[currentQuestion].questionImage} className=\"question-image\"/>\r\n                    </div>\r\n                </div>\r\n                <div className='answer-section'>\r\n                    {Questions[currentQuestion].answerOptions.map((answerOption) => (\r\n                        <button onClick={() => handleAnswerOptionClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\r\n                    ))}\r\n                    {Questions[otherQuestions[0]].answerOptions.map((answerOption) => (\r\n                        <button onClick={() => handleAnswerOptionClick(false)}>{answerOption.answerText}</button>\r\n                    ))}\r\n                    {Questions[otherQuestions[1]].answerOptions.map((answerOption) => (\r\n                        <button onClick={() => handleAnswerOptionClick(false)}>{answerOption.answerText}</button>\r\n                    ))}\r\n                    {Questions[otherQuestions[2]].answerOptions.map((answerOption) => (\r\n                        <button onClick={() => handleAnswerOptionClick(false)}>{answerOption.answerText}</button>\r\n                    ))}\r\n                </div>\r\n                </>\r\n\t\t\t)}\r\n\t\t</div>\r\n    )\r\n\r\n}","import React from 'react';\nimport logo from './images/logo.png';\nimport './App.css';\nimport QuizBody from './components/QuizBody'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        <QuizBody/>\n      </header>\n      <body>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}